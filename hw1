#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct books{
    long id;
    char* author;
    char* name;
    int n_all;
    int n_have;
    struct books* next;
};
struct students{
    char* id;
    char* name;
    char* midname;
    char* surname;
    char* faculty;
    char* profession;
    struct students* next;
};
struct users{
    int r_stud;
    int r_book;
    char* pass;
    char* login;
    struct users* left;
    struct users* right;
};
struct student_books{
    long id;
    char* stud_id;
    char* data;
    struct student_books* next;
};
//book

void menuBooks();//основная функция, которая спрашивает действие
void readBook(struct books** head);//основная функция тз, которая заполняет стек из файла
void loadfile(struct books* head, FILE* f);//основная функция тз, которая загружает стек в файл
int addBook(struct books** head);//функция тз, которая добавляет книгу в стек
void deleteBook(struct books** head);//функция тз, которая удаляет книгу из стека
void redactBook(struct books** head);//функция тз, которая "редактирует" книгу
int findBook(struct books *head, long id, struct books **temp);//дополнительная функция, которая ищет книгу и сохраняет ее данные
char* newstring(char* str);//дополнительная функция, которая переписывает строку в новый указатель
struct books* delete(struct books* head, long id);//дополнительная функция, которая непосредственно удаляет книгу
struct books* push(struct books *head, long id, char* author, char* name, int n_all, int n_have);//дополнительная функция, которая непосредственно загружает книгу в стек
void show(struct books *head);//дополнительная функция, которая выводит стек на экран
//login
void login(int* rstud, int* rbooks);
struct users* readUsers(struct users* head, char* login, char* pass, int r_stud, int r_book);
int findUser(struct users* head, char* login, char** pass, int* r_stud, int* r_book);
int mainmenu();
//students
struct students* pushStud(struct students* head,char* s1, char* s2, char* s3, char* s4, char* s5, char* s6);
void menuStud();
void readStud(struct students** head);
void showStud(struct students* head);
void addStud(struct students** head);
struct students* findStud(struct students* head, char* id);
struct students* deleteStud(struct students* head, char* id);
void redactStud(struct students** head);
void saveStud(struct students* head);

//part 3
struct student_books* readStudBook(struct student_books* head);
struct student_books* pushStudBook(struct student_books* head, long id, char* stud_id, char* data);
struct student_books* findStudentBooksByStud_id(struct student_books* head,char* stud_id);
struct student_books* findStudentBooksById(struct student_books* head,long id);
void listStudentBooks(struct student_books* head);
void saveStudentBooks(struct student_books* head);
//########################################################################
int main(void)
{

    int i, j;
    int m;
    login(&i, &j);
    if(i == 1 && j == 1){
        while((m = mainmenu()) != 0){
            if(m == 1)
                menuBooks();
            if(m == 2)
                menuStud();
        }
    }
    else if(i == 1){
        menuBooks();
    }
    else if(j == 1){
        menuStud();
    }
    //menuBooks();
    //menuStud();



    return 0;
}
char* newstring(char* str) {
    char* newstr = (char*)malloc(sizeof(char));
    strcpy(newstr,str);
    return newstr;
}
//books
void menuBooks(){
    struct books* head = (struct books*)malloc(sizeof(struct books));//стек доступен всем из меню
    /*
    head = push(head, 1231231231,"asd asd","ads", 32, 21);
    head = push(head, 1231231232,"aad asd","aas", 32, 21);
    head = push(head, 1231231233,"add asd","ads", 32, 23);
    */
    readBook(&head);//заполняем стек
    int func = -1;
    while(func != 0){
        printf("\nChoose function:\n0 exit\n1 add new book\n2 delete book\n3 redact book's inf\n4 save file\n5 show list\n");
        scanf("%d", &func);
        switch(func) {
            case 1:
                addBook(&head);
                break;
            case 2:
                deleteBook(&head);
                break;
            case 3:
                redactBook(&head);
                break;
            case 4:
                //открыть файл на запись, удалив содержимое, загрузить стек, закрыть
                FILE* f = fopen( "books.csv", "w");
                loadfile(head, f);
                fclose(f);
                break;
            case 5:
                show(head);
                break;
        }
    }

}
int addBook(struct books** head){
    printf("Putting book\n");
    //временные переменные
    long id;
    char* author = malloc(sizeof(char));//эти данные не требуют чистки, так как испольуются стеком
    char* name = malloc(sizeof(char));
    int n_all;
    int n_have;
    printf("Put id or 0 to close\n");

    scanf("%ld", &id);
    while(findBook(*head,id, NULL) == 1){//проверка айди, данные по книге не сохраняем
        printf("This book is already exist\n");
        printf("Put id or 0 to close\n");
        scanf("%ld", &id);
    }
    if(id == 0){
        return 0;
    }
    printf("Put quantity of all books\n");
    scanf("%d", &n_all);
    printf("Put quantity of books tou have\n");
    scanf("%d", &n_have);
    printf("Put author and name in form:\n<author>;<name>\n");
    scanf("\n%[^;];%[^\n]", author, name);
    printf("You putted: %d; %d; %d; %s; %s;\n",id, n_all,n_have, author, name);

    *(head) = push(*head ,id ,author ,name ,n_all ,n_have);
    printf("New book created\n");
}
void deleteBook(struct books** head){
    printf("Deleting book\n");
    printf("Put id to delete book\n");
    long id;
    scanf("%ld", &id);

    if(findBook(*head,id,NULL)){
        printf("book is found...\n");
        *(head) = delete(*head, id);//такое представление функции необходимо, чтобы перезаписать заголовок стека
    }
    else{
        printf("book is not found\n");
    }
    show(*head);
}
struct books* delete(struct books* head, long id){
    struct books* temp = head;
    struct books* prev = NULL;
    int c = 0;
    while(temp != NULL){
        if(temp->id == id){
            if(c != 0) {//если удаляем не из вершины
                prev->next = temp->next;//перенапрявляем ссылки
                break;
            }
            else {
                head = head->next;//у вершины нет предыдущего, потому достаточно сдвинуть вершину
                break;
            }
        }
        c++;
        prev = temp;
        temp = temp->next;
    }
    return head;//в данной функции остальные элементы также изменяют стек
}
int findBook(struct books *head, long id, struct books **temp){
    if(head->id < 0) {
        return 0;
    }
    if(id == head->id){
        if(temp!=NULL)
            *(temp) = head;
        return 1;
    }
    if(head->next->id < 0) {
        return 0;
    }
    return findBook(head->next, id, temp);
}
void redactBook(struct books** head){
    printf("Redacting book\n");
    printf("Put book's id:\n");
    long id; int f = -1;

    scanf("%ld", &id);

    struct books* red = (struct books*)malloc(sizeof(struct books));
    while(findBook(*head, id, &red) != 1 && id!=0){
        printf("This book is not exist\n");
        printf("Put id or 0 to close\n");
        scanf("%ld", &id);
    }
    struct books apply = {id, red->author, red->name, red->n_all, red->n_have, NULL};
    printf("%s", red->name);
    char* tmp1 = (char*)malloc(sizeof(char));
    char* tmp2 = (char*)malloc(sizeof(char));
    printf("Choose value to change:\n0 exit\n1 author\n2 name\n3 all books\n4 book's have\n5 apply\n");
    while(f!=0 && id!=0){
        printf("function:\n");
        scanf("%d", &f);

        int n;
        switch (f) {
            case 1:
                printf("put new author:\n");
                scanf("\n%[^\n]", tmp1);
                apply.author = tmp1;
                break;
            case 2:
                printf("put new name:\n");
                scanf("\n%[^\n]", tmp2);
                apply.name = tmp2;
                break;
            case 3:
                printf("put new all books:\n");
                scanf("%d", &n);
                apply.n_all = n;
                break;
            case 4:
                printf("put new books you have:\n");
                scanf("%d", &n);
                apply.n_have = n;
                break;
            case 5:
                printf("your book: %ld; %s; %s; %d; %d\n",apply.id, apply.author, apply.name, apply.n_all, apply.n_have);
                *(head) = delete(*head, id);
                *(head) = push(*head,apply.id, apply.author, apply.name, apply.n_all, apply.n_have);
                break;
        }
    }
}
void show(struct books* head){
    if(head->id>0){
        printf("%ld;%s;%s;%d;%d\n",head->id,head->author,head->name,head->n_all,head->n_have);
        show(head->next);
    }
}
struct books* push(struct books *head, long id, char* author, char* name, int n_all, int n_have) {
    struct books *new = (struct books *) malloc(sizeof(struct books));
    new->author = newstring(author);
    new->name = newstring(name);
    new->n_have = n_have;
    new->n_all = n_all;
    new->id = id;
    new->next = head;
    return new;
}
void readBook(struct books** head){
    //временные переменные, почему не структура? ее сложно обрабатывать(
    long id;
    char* author = malloc(sizeof(char));
    char* name = malloc(sizeof(char));
    int n_all;
    int n_have;
    FILE* f = fopen( "books.csv", "r");
    printf("r");
    while(fscanf(f,"%ld;%[^;];%[^;];%d;%d",&id,author,name,&n_all,&n_have)!=EOF){
        //printf("your book: %ld; %s; %s; %d; %d",id, author, name,n_all,n_have);
        *head = push(*head,id,newstring(author),newstring(name),n_all,n_have);
    }
    fclose(f);
}
void loadfile(struct books* head, FILE* f){
    printf("Loading data...\n");

    if(head!=NULL && head->id>0){
        fprintf(f,"%ld;%s;%s;%d;%d\n",head->id,head->author,head->name,head->n_all,head->n_have);
        loadfile(head->next, f);
    }
    else {
        printf("File saved\n");
        fclose(f);
    }
}

//login
void login(int* r_stud, int* r_book){
    FILE* f = fopen("users.csv", "r");
    struct users* head = NULL;
    char* login = (char*)malloc(sizeof(char));
    char* pass = (char*)malloc(sizeof(char));

    while(fscanf(f,"%[^;];%[^;];%d;%d\n", login, pass, r_stud, r_book)!=EOF){
        head = readUsers(head, login, pass, *r_stud, *r_book);
    }

    printf("Put your login:\n");
    scanf("%s", login);

    while(findUser(head, login, &pass, r_stud, r_book)!=1){
        printf("Wrong login. Put your login:\n");
        scanf("%s", login);
    }

    char* temp = (char*)malloc(sizeof(char));
    printf("Put your password:\n");
    scanf("%s", temp);
    while(strcmp(pass,temp)!=0){
        printf("Wrong pass. Put your password:\n");
        scanf("%s", temp);
    }
    printf("Login success");
}
struct users* readUsers(struct users* head, char* login, char* pass, int r_stud, int r_book){
    if(head==NULL){
        head = (struct users*) malloc(sizeof(struct users));
        head->login = newstring(login);
        head->pass = newstring(pass);
        head->r_stud = r_stud;
        head->r_book = r_book;
        head->left = head->right = NULL;
    }
    else if(strcmp(login, head->login) < 0){
        head->left = readUsers(head->left, login, pass, r_stud, r_book);
    }
    else{
        head->right = readUsers(head->right, login, pass, r_stud, r_book);
    }
    return head;
}
int findUser(struct users* head, char* login, char** pass, int* r_stud, int* r_book){
    int cond;
    if(head==NULL){
        return -1;
    }
    if((cond = strcmp(login, head->login)) == 0){
        *pass = newstring(head->pass);
        *(r_stud) = head->r_stud;
        *(r_book) = head->r_book;
        return 1;
    }
    else if(cond<0){
        return findUser(head->left, login, pass, r_stud, r_book);
    }
    else{
        return findUser(head->right, login, pass, r_stud, r_book);
    }
}
int mainmenu() {
    int i = 0;
    printf("choose option:\n0 exit\n1 books\n2 students\n");
    scanf("%d", &i);
    return i;
}

//students
struct students* pushStud(struct students* head,char* s1, char* s2, char* s3, char* s4, char* s5, char* s6){
    struct students* new = (struct students*) malloc(sizeof(struct students));
    new->id = newstring(s1);
    new->name = newstring(s2);
    new->midname = newstring(s3);
    new->surname = newstring(s4);
    new->faculty = newstring(s5);
    new->profession = newstring(s6);
    new->next = head;
    return new;
}
void menuStud(){
    int op = -1;
    struct students* head = NULL;
    readStud(&head);
    char* temp = (char*)malloc(sizeof(char));
    while(op!=0){
        printf("Students. Choose function:\n0 exit\n1 add student\n2 delete student\n3 redact students\n4 show student\n5 save to file\n");
        scanf("%d", &op);

        switch(op){
            case 1:
                addStud(&head);
                break;
            case 2:
                printf("Put id to delete:\n"); scanf("%s", temp);
                while (findStud(head,temp)==NULL){
                    printf("Student is not exist. Put id to delete:\n"); scanf("%s", temp);
                }
                head = deleteStud(head, temp);
                break;
            case 3:
                redactStud(&head);
                break;
            case 4:
                showStud(head);
                break;
            case 5:
                saveStud(head);
                break;
        }
    }
}
void readStud(struct students** head){

    char* t1 = (char*)malloc(sizeof(char));
    char* t2 = (char*)malloc(sizeof(char));
    char* t3 = (char*)malloc(sizeof(char));
    char* t4 = (char*)malloc(sizeof(char));
    char* t5 = (char*)malloc(sizeof(char));
    char* t6 = (char*)malloc(sizeof(char));

    FILE* f = fopen("students.csv","r +");
    while(fscanf(f,"%[^;];%[^;];%[^;];%[^;];%[^;];%[^\n]\n", t1, t2, t3, t4, t5, t6)!=EOF){
        *head = pushStud(*head, t1, t2, t3, t4, t5, t6);
    }
    fclose(f);

}
void showStud(struct students* head){
    struct students* tp = head;
    while(tp!=NULL){
        printf("%s;%s;%s;%s;%s;%s\n", tp->id, tp->name, tp->midname, tp->surname, tp->faculty, tp->profession);
        tp = tp->next;
    }
}
void addStud(struct students** head){
    char* id = (char*)malloc(sizeof(char));
    printf("Add Stud. Put id:\n");
    scanf("%s", id);
    struct students* new = (struct students*)malloc(sizeof(struct students));
    while(findStud(*head,id)){
        printf("Student is already exist. Put id:\n");
        scanf("%s", id);
    }
    new->id = newstring(id);
    char* temp = (char*)malloc(sizeof(char));
    printf("Put name:\n");
    scanf("%s", temp); new->name = newstring(temp);
    printf("Put middlename:\n");
    scanf("%s", temp); new->midname = newstring(temp);
    printf("Put surname:\n");
    scanf("%s", temp); new->surname = newstring(temp);
    printf("Put faculty:\n");
    scanf("%s", temp); new->faculty = newstring(temp);
    printf("Put profession:\n");
    scanf("%s", temp); new->profession = newstring(temp);
    *head = pushStud(*head, new->id, new->name, new->midname, new->surname, new->faculty, new->profession);
}
struct students* deleteStud(struct students* head, char* id){
    struct students* temp = head;
    struct students* prev = NULL;
    int c = 0;
    while(temp!=NULL){
        if(strcmp(temp->id, id) == 0){
            if(c == 0){
                head = temp->next;
                return head;
            }
            else{
                prev->next = temp->next;
                return head;
            }
        }
        c++;
        prev = temp;
        temp = temp->next;
    }
    return head;
}
struct students* findStud(struct students* head, char* id){
    struct students* tp = head;
    while(tp!=NULL){
        if(strcmp(tp->id, id) == 0){
            return tp;
        }
        tp = tp->next;
    }
    return NULL;
}
void redactStud(struct students** head){
    char* id = (char*)malloc(sizeof(char));
    char* temp = (char*)malloc(sizeof(char));
    struct students* new = (struct students*)malloc(sizeof(struct students));
    printf("Redact students. Put id:\n"); scanf("%s", id);
    while((new = findStud(*head, id))==NULL){
        printf("Student is not exist. Put id:\n"); scanf("%s", id);
    }
    int f = -1;
    while(f!=0){
        printf("Chose operation:\n0 exit\n1 name\n2 middlename\n3 surname\n4 faculty\n5 profession\n6 apply\n");
        scanf("%d", &f);
        switch(f){
            case 0:
                break;
            case 1:
                printf("Put name:\n");
                scanf("%s", temp);
                new->name = newstring(temp);
                break;
            case 2:
                printf("Put middlename:\n");
                scanf("%s", temp);
                new->midname = newstring(temp);
                break;
            case 3:
                printf("Put surname:\n");
                scanf("%s", temp);
                new->surname = newstring(temp);
                break;
            case 4:
                printf("Put faculty:\n");
                scanf("%s", temp);
                new->faculty = newstring(temp);
                break;
            case 5:
                printf("Put profession:\n");
                scanf("%s", temp);
                new->profession = newstring(temp);
                break;
            case 6:
                printf("you redact:%s;%s;%s;%s;%s;%s\n", new->id, new->name, new->midname, new->surname, new->faculty, new->profession);
                *head = deleteStud(*head, id);
                *head = pushStud(*head,new->id, new->name, new->midname, new->surname, new->faculty, new->profession);
                break;
        }
    }
}
void saveStud(struct students* head){
    struct students* temp = head;
    FILE* f = fopen("students.csv", "w");
    while(temp!=NULL){
        fprintf(f, "%s;%s;%s;%s;%s;%s\n", temp->id, temp->name, temp->midname, temp->surname, temp->faculty, temp->profession);
        temp = temp->next;
    }
    fclose(f);
}

//part 3
struct student_books* readStudBook(struct student_books* head){
    FILE* f = fopen("student_books.csv", "r +");
    char* stud_id = (char*)malloc(sizeof(char));
    char* data = (char*)malloc(sizeof(char));
    long id;
    struct student_books* new = head;
    while(fscanf(f,"%ld;%[^;];%[^\n]\n", &id, stud_id, data)!=EOF){
        new = pushStudBook(new, id, stud_id, data);
    }
    fclose(f);
    return new;
}
struct student_books* pushStudBook(struct student_books* head, long id, char* stud_id, char* data){
    struct student_books* new = (struct student_books*)malloc(sizeof(struct student_books));
    new->data = newstring(data);
    new->stud_id = newstring(stud_id);
    new->id = id;
    new->next = head;
    return new;
}
struct student_books* findStudentBooksByStud_id(struct student_books* head,char* stud_id){
    struct student_books* tp = head;
    while(tp!=NULL){
        if(strcmp(stud_id, tp->stud_id) == 0){
            return tp;
        }
        tp = tp->next;
    }
    return NULL;
}
struct student_books* findStudentBooksById(struct student_books* head,long id){// id = ISBN
    struct student_books* tp = head;
    while(tp!=NULL){
        if(id == tp->id){
            return tp;
        }
        tp = tp->next;
    }
    return NULL;
}
void listStudentBooks(struct student_books* head){
    struct student_books* tp = head;
    while (tp!=NULL){
        printf("%ld;%s;%s\n", tp->id, tp->stud_id, tp->data);
        tp = tp->next;
    }
}
void saveStudentBooks(struct student_books* head){
    struct student_books* tp = head;
    FILE* f = fopen("student_books.csv","w");
    while(tp!=NULL){
        fprintf(f,"%ld;%s;%s\n", tp->id, tp->stud_id, tp->data);
        tp = tp->next;
    }
}
